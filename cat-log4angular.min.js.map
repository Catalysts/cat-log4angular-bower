{"version":3,"sources":["src/cat-log-service.js","src/cat-http-appender.js"],"names":[],"mappings":"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","file":"cat-log4angular.min.js","sourcesContent":["'use strict';\r\n\r\n/*\r\n * EcmaScript5 compatible logging based on ideas from Diary.js\r\n * see https://docs.google.com/document/d/1gGUEODxxDjY7azF8InqtN1pRcLo3WhGb8BcoIihyI80/edit#heading=h.w7kphvm7blel\r\n *\r\n * More details:\r\n * https://github.com/angular/diary.js/blob/master/src/diary.js\r\n * http://log4javascript.org/\r\n *\r\n *\r\n * Appender interface:\r\n * {\r\n *  report(level, group, message [, memorySizes]) : function called by the logger, if the configured log level is met\r\n * }\r\n */\r\nangular\r\n    .module('cat.service.log', [])\r\n    .constant('ROOT_LOGGER_NAME', 'ROOT')\r\n    .constant('DEFAULT_LEVEL', 'info')\r\n    .constant('LOG_LEVEL_ORDER', {'debug': 1, 'info': 2, 'warn': 3, 'error': 4})\r\n    .constant('CONSOLE_APPENDER', {\r\n        report: function (level, group, message) {\r\n            if (typeof console === 'object') {\r\n                if (message instanceof Error) {\r\n                    console[level](group + ' ' + message.message);\r\n                    console.log(message.stack);\r\n                } else {\r\n                    console[level](group + ' ' + message);\r\n                }\r\n            }\r\n        }\r\n    })\r\n    .provider('catLogService', ['ROOT_LOGGER_NAME', 'DEFAULT_LEVEL', 'LOG_LEVEL_ORDER',\r\n        function (ROOT_LOGGER_NAME, DEFAULT_LEVEL, LOG_LEVEL_ORDER) {\r\n            // available levels: log, debug, info, warn, error\r\n            var providerSelf = this;\r\n            var config = {};\r\n            config[ROOT_LOGGER_NAME] = DEFAULT_LEVEL;\r\n            var dumpMemorySizes = false;\r\n\r\n            var appenderList = [];\r\n\r\n            var configureLogLevel = function (group, level) {\r\n                if (group === ROOT_LOGGER_NAME && level === undefined) {\r\n                    throw new Error('Cannot undefine the log level of the root logger.');\r\n                }\r\n                config[group] = level;\r\n                return this;\r\n            };\r\n\r\n            this.configure = configureLogLevel;\r\n            this.appender = function (appender) {\r\n                appenderList.push(appender);\r\n                return this;\r\n            };\r\n            this.enableMemorySizes = function () {\r\n                dumpMemorySizes = true;\r\n                return this;\r\n            };\r\n            this.disableMemorySizes = function () {\r\n                dumpMemorySizes = false;\r\n                return this;\r\n            };\r\n\r\n            this.$get = function () {\r\n                var rootLogger = {\r\n                    parent: undefined,\r\n                    group: ROOT_LOGGER_NAME,\r\n                    resolveLevel: function () {\r\n                        return config[ROOT_LOGGER_NAME];\r\n                    },\r\n                    setLevel: function (newLevel) {\r\n                        configureLogLevel(this.group, newLevel);\r\n                    }\r\n                };\r\n                /*\r\n                 Resolves the log level for the current logger, by travelling up the hierarchy\r\n                 if no log level is defined for the current logger.\r\n                 This method could be memoized.\r\n                 */\r\n                var resolveLevel = function () {\r\n                    if (angular.isDefined(config[this.group])) {\r\n                        // log level is defined, use it\r\n                        return config[this.group];\r\n                    } else if (angular.isDefined(this.parent)) {\r\n                        return this.parent.resolveLevel();\r\n                    } else {\r\n                        throw new Error('Neither log level nor parent set for this logger: \"' + this.group + '\".');\r\n                    }\r\n                };\r\n                var loggify = function (logger) {\r\n                    angular.forEach(['debug', 'info', 'warn', 'error'], function (level) {\r\n                        var methodLvlNumber = LOG_LEVEL_ORDER[level];\r\n                        var log = function (message) {\r\n                            if (LOG_LEVEL_ORDER[logger.resolveLevel()] <= methodLvlNumber) {\r\n                                angular.forEach(appenderList, function (appender) {\r\n                                    var memorySizes;\r\n                                    if (dumpMemorySizes && window.performance && window.performance.memory) {\r\n                                        memorySizes = window.performance.memory;\r\n                                    }\r\n                                    appender.report(level, logger.group, message, memorySizes);\r\n                                });\r\n                            }\r\n                        };\r\n                        logger[level] = function (message, func) {\r\n                            if (typeof func === 'undefined') {\r\n                                log(message);\r\n                            } else {\r\n                                // performance measurement\r\n                                var start = new Date().getTime();\r\n                                log('BEFORE: ' + message);\r\n                                func();\r\n                                var elapsed = new Date().getTime() - start;\r\n                                log('AFTER: ' + message + ' took ' + elapsed + ' ms');\r\n                            }\r\n                        };\r\n                    });\r\n                };\r\n                loggify(rootLogger);\r\n                return {\r\n                    Logger: function (group, parent) {\r\n                        if (angular.isUndefined(group)) {\r\n                            return rootLogger;\r\n                        }\r\n                        if (angular.isUndefined(parent)) {\r\n                            // use root logger as default parent\r\n                            parent = rootLogger;\r\n                        }\r\n                        // possibility to memoize the logger object\r\n                        var logger = {\r\n                            parent: parent,\r\n                            group: group,\r\n                            resolveLevel: resolveLevel,\r\n                            setLevel: function (newLevel) {\r\n                                configureLogLevel(this.group, newLevel);\r\n                            }\r\n                        };\r\n                        loggify(logger);\r\n                        return logger;\r\n                    },\r\n                    appender: providerSelf.appender\r\n                };\r\n            };\r\n        }])\r\n    .config(function ($provide) {\r\n        $provide.decorator('$log', ['$delegate', 'catLogService', 'ROOT_LOGGER_NAME', function ($delegate, catLogService, ROOT_LOGGER_NAME) {\r\n            // instantiate  root logger\r\n            var rootLogger = catLogService.Logger();\r\n\r\n            angular.forEach(['debug', 'info', 'warn', 'error'], function (level) {\r\n                $delegate[level] = rootLogger[level];\r\n            });\r\n            $delegate.Logger = catLogService.Logger;\r\n            $delegate.setLevel = rootLogger.setLevel;\r\n            $delegate.group = ROOT_LOGGER_NAME;\r\n\r\n            return $delegate;\r\n        }]);\r\n    })\r\n;\r\n","'use strict';\r\n\r\n/*\r\n * HTTP Upload Appender for ngLogCustom module\r\n *\r\n * Uploads the logs that have a log level >= minLevel to postUrl in the specified interval.\r\n * No uploads happen if no suitable logs have been produced.\r\n */\r\nangular\r\n    .module('cat.service.log')\r\n    .constant('HTTP_LOGGER_NAME', 'catHttpLogAppender')\r\n    .provider('catHttpLogAppender', function () {\r\n        var intervalInSeconds = 10;\r\n        var postUrl;\r\n        var minLevel = 'info';\r\n        this.interval = function (_intervalInSeconds) {\r\n            intervalInSeconds = _intervalInSeconds;\r\n            return this;\r\n        };\r\n        this.postUrl = function (_postUrl) {\r\n            postUrl = _postUrl;\r\n            return this;\r\n        };\r\n        this.minUploadLevel = function (_minLevel) {\r\n            minLevel = _minLevel;\r\n            return this;\r\n        };\r\n        this.$get = ['$http', '$interval', '$log', 'HTTP_LOGGER_NAME', 'LOG_LEVEL_ORDER', function ($http, $interval, $log, HTTP_LOGGER_NAME, LOG_LEVEL_ORDER) {\r\n            var logger = $log.Logger(HTTP_LOGGER_NAME);\r\n            if (typeof postUrl === 'undefined') {\r\n                throw new Error('catHttpLogAppenderProvider requires definition of postUrl');\r\n            }\r\n            var logs = [];\r\n\r\n            var appender = {\r\n                report: function (level, group, message, memorySizes) {\r\n                    logs.push({\r\n                        level: level,\r\n                        group: group,\r\n                        message: typeof message === 'string' ? message : message.toString(),\r\n                        memorySizes: memorySizes,\r\n                        timestamp: new Date().getTime()\r\n                    });\r\n                },\r\n                flush: function () {\r\n                    var minLevelOrder = LOG_LEVEL_ORDER[minLevel];\r\n                    var logsToSend = [];\r\n                    angular.forEach(logs, function (logEntry) {\r\n                        if (LOG_LEVEL_ORDER[logEntry.level] >= minLevelOrder) {\r\n                            logsToSend.push(logEntry);\r\n                        }\r\n                    });\r\n                    logs.length = 0;\r\n                    if (logsToSend.length > 0) {\r\n                        return $http.post(postUrl, logsToSend)\r\n                            .success(function () {\r\n                                logger.debug('Successfully uploaded logs.');\r\n                            })\r\n                            .error(function (data, status, headers, config, statusText) {\r\n                                logger.debug('Error uploading logs: ' + status + ' ' + statusText);\r\n                            });\r\n                    } else {\r\n                        logger.debug('No logs to upload - skipping upload request.');\r\n                    }\r\n                }\r\n            };\r\n            $interval(appender.flush, intervalInSeconds * 1000, 0, false);\r\n            return appender;\r\n        }];\r\n    })\r\n;"],"sourceRoot":"../src"}